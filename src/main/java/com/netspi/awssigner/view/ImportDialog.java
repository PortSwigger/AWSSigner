/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.netspi.awssigner.view;

import com.netspi.awssigner.log.LogWriter;
import com.netspi.awssigner.model.AssumeRoleProfile;
import com.netspi.awssigner.model.CommandProfile;
import com.netspi.awssigner.model.Profile;
import com.netspi.awssigner.model.StaticCredentialsProfile;
import com.netspi.awssigner.model.persistence.ProfileImporter;
import com.netspi.awssigner.model.persistence.AutoProfileImporter;
import com.netspi.awssigner.model.persistence.ClipboardProfileImporter;
import com.netspi.awssigner.model.persistence.EnvironmentVariableProfileImporter;
import com.netspi.awssigner.model.persistence.FileProfileImporter;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author jkarnes
 */
public class ImportDialog extends javax.swing.JDialog {

    private static final int SELECT_COLUMN_INDEX = 0;
    private static final int NAME_COLUMN_INDEX = 1;
    private static final int KEYID_COLUMN_INDEX = 2;
    private static final int TYPE_COLUMN_INDEX = 3;

    private final List<Profile> profiles = new ArrayList<>();
    private List<Profile> result = null;
    private final List<String> existingProfileNames;

    public ImportDialog(java.awt.Frame parent, boolean modal, List<String> existingProfileNames) {
        super(parent, modal);
        this.existingProfileNames = existingProfileNames;
        initComponents();
        BurpUIComponentCustomizer.applyBurpStyling(this);
    }

    /**
     * Shows the dialog and gets the user's choice
     *
     * @return The result object or null if the dialog was closed/cancelled
     */
    public Optional<List<Profile>> showDialog() {
        setVisible(true);
        return Optional.ofNullable(result);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        autoButton = new javax.swing.JButton();
        fileButton = new javax.swing.JButton();
        envButton = new javax.swing.JButton();
        clipboardButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        selectAllButton = new javax.swing.JButton();
        selectNoneButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        profileTable = new javax.swing.JTable();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import Signing Profiles");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Source", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(255, 102, 51))); // NOI18N

        autoButton.setText("Auto");
        autoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoButtonActionPerformed(evt);
            }
        });

        fileButton.setText("File");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        envButton.setText("Env");
        envButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envButtonActionPerformed(evt);
            }
        });

        clipboardButton.setText("Clipboard");
        clipboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clipboardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(autoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(envButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clipboardButton))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(autoButton)
                .addComponent(fileButton)
                .addComponent(envButton)
                .addComponent(clipboardButton))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(255, 102, 51))); // NOI18N

        selectAllButton.setText("All");
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        selectNoneButton.setText("None");
        selectNoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectNoneButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(selectAllButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectNoneButton))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(selectAllButton)
                .addComponent(selectNoneButton))
        );

        jScrollPane2.setPreferredSize(new java.awt.Dimension(900, 200));

        profileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Import", "Name", "Access Key Id", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        profileTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(profileTable);
        if (profileTable.getColumnModel().getColumnCount() > 0) {
            profileTable.getColumnModel().getColumn(0).setMinWidth(25);
            profileTable.getColumnModel().getColumn(0).setPreferredWidth(60);
            profileTable.getColumnModel().getColumn(0).setMaxWidth(75);
            profileTable.getColumnModel().getColumn(1).setMinWidth(150);
            profileTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            profileTable.getColumnModel().getColumn(2).setMinWidth(220);
            profileTable.getColumnModel().getColumn(2).setPreferredWidth(250);
            profileTable.getColumnModel().getColumn(3).setMinWidth(25);
            profileTable.getColumnModel().getColumn(3).setPreferredWidth(125);
            profileTable.getColumnModel().getColumn(3).setMaxWidth(150);
        }
        profileTable.getModel().addTableModelListener(this::onTableModelEvent);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 520, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 910, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelButton)
                .addGap(379, 379, 379))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        //Close the dialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        //Remove all non-selected rows
        int index = 0;
        for (Iterator<Profile> iterator = profiles.iterator(); iterator.hasNext(); index++) {
            iterator.next();
            if (!(boolean) profileTable.getModel().getValueAt(index, SELECT_COLUMN_INDEX)) {
                iterator.remove();
            }
        }
        LogWriter.logDebug(profiles.size() + " profile(s) remaining after removing unselected profiles.");

        Set<String> allProfileNames = profiles.stream().map(Profile::getName).collect(Collectors.toSet());

        //Check if there are any collisions with existing profiles.
        Set<String> existingNameCollisions = allProfileNames.stream().filter(name -> {
            return existingProfileNames.contains(name);
        }).collect(Collectors.toSet());

        //Check if there are any collisions within the new profiles to be imported.
        Set<String> uniqueNames = new HashSet<>();
        Set<String> duplicateNames = allProfileNames.stream()
                .filter(n -> !uniqueNames.add(n)) // Set.add() returns false if the element was already in the set.
                .collect(Collectors.toSet());

        //Check if any assume role profiles to be imported are missing their assumer
        Set<String> assumeRoleMissingParent = profiles.stream().filter(profile -> {
            return profile instanceof AssumeRoleProfile
                    && !allProfileNames.contains(((AssumeRoleProfile) profile).getAssumerProfile().get().getName());
        }).map(profile -> {
            return "AssumeRole: " + profile.getName() + " - Missing Assumer Profile: " + ((AssumeRoleProfile) profile).getAssumerProfile().get().getName();
        })
                .collect(Collectors.toSet());

        if (!existingNameCollisions.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Profiles with the following names already exist.\nPlease rename these in the table before importing:\n" + existingNameCollisions.stream().collect(Collectors.joining(", ")),
                    "Profile Name Collision",
                    JOptionPane.ERROR_MESSAGE);
        } else if (!duplicateNames.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "The following profile names appear twice in the table.\nPlease rename one before importing:\n" + duplicateNames.stream().collect(Collectors.joining(", ")),
                    "Profile Name Collision",
                    JOptionPane.ERROR_MESSAGE);
        } else if (!assumeRoleMissingParent.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "The following assume role profile are imported without their parent assumer profile.\nPlease import the parent assumer profile as well:\n" + assumeRoleMissingParent.stream().collect(Collectors.joining(",\n")),
                    "Profile Name Collision",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            //Set the result object
            result = profiles;
            LogWriter.logInfo("Importing " + result.size() + " profile(s): " + result.stream().map(Profile::getName).collect(Collectors.joining(", ")));
            //Close the dialog
            setVisible(false);
            dispose();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        DefaultTableModel tableModel = ((DefaultTableModel) profileTable.getModel());
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            tableModel.setValueAt(true, i, SELECT_COLUMN_INDEX);
        }
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void selectNoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectNoneButtonActionPerformed
        DefaultTableModel tableModel = ((DefaultTableModel) profileTable.getModel());
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            tableModel.setValueAt(false, i, SELECT_COLUMN_INDEX);
        }
    }//GEN-LAST:event_selectNoneButtonActionPerformed

    private void autoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoButtonActionPerformed
        ProfileImporter importer = new AutoProfileImporter();

        List<Profile> newProfiles = importer.importProfiles();
        LogWriter.logDebug("Auto import found " + newProfiles.size() + " profile(s)");
        addProfilesToTable(newProfiles);
    }//GEN-LAST:event_autoButtonActionPerformed

    private void envButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envButtonActionPerformed
        ProfileImporter importer = new EnvironmentVariableProfileImporter();

        List<Profile> newProfiles = importer.importProfiles();
        LogWriter.logDebug("Environment Variable import found " + newProfiles.size() + " profile(s)");
        addProfilesToTable(newProfiles);

    }//GEN-LAST:event_envButtonActionPerformed

    private void clipboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clipboardButtonActionPerformed
        ProfileImporter importer = new ClipboardProfileImporter();

        List<Profile> newProfiles = importer.importProfiles();
        LogWriter.logDebug("Clipboard import found " + newProfiles.size() + " profile(s)");
        addProfilesToTable(newProfiles);
    }//GEN-LAST:event_clipboardButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        JFileChooser chooser = new JFileChooser(System.getProperty("user.home"));
        chooser.setFileHidingEnabled(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Path fileSelection = Paths.get(chooser.getSelectedFile().getPath());
            LogWriter.logDebug("Selected path from file dialog: " + fileSelection);
            FileProfileImporter fileImporter = new FileProfileImporter(fileSelection);
            List<Profile> newProfiles = fileImporter.importProfiles();
            LogWriter.logInfo("Imported " + newProfiles.size() + " profile(s) from file: " + fileSelection);
            addProfilesToTable(newProfiles);
        } else {
            LogWriter.logDebug("No file chosen in file prompt");
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void addProfilesToTable(List<Profile> newProfiles) {
        DefaultTableModel tableModel = (DefaultTableModel) profileTable.getModel();
        for (Profile newProfile : newProfiles) {
            String typeName = null;
            if (newProfile instanceof StaticCredentialsProfile) {
                typeName = "Static Credentials";
            } else if (newProfile instanceof AssumeRoleProfile) {
                typeName = "Assume Role";
            } else if (newProfile instanceof CommandProfile) {
                typeName = "Command";
            } else {
                LogWriter.logError("Unexpected profile type: " + newProfile.getClass());
                continue;
            }

            //Loop until we have a unique name. Starting with the name as-is, then (1), (2), ...
            String originalName = newProfile.getName();
            String name = originalName;
            int i = 0;
            while (profileNameExistsInCollection(profiles, name)) {
                i++;
                name = originalName + " (" + i + ")";
            }
            //Here, a unique name has been found
            newProfile.setName(name);

            //Add to the cumulative list
            profiles.add(newProfile);

            //Get a key id to show (if possible)
            String keyId = "N/A";
            if (newProfile instanceof StaticCredentialsProfile) {
                keyId = ((StaticCredentialsProfile) newProfile).getAccessKey().orElse("");
            }
            if (newProfile.getKeyId().isPresent()) {
                keyId = newProfile.getKeyId().get();
            }
            //Add to our table
            tableModel.addRow(new Object[]{true, newProfile.getName(), keyId, typeName});
        }
    }

    private boolean profileNameExistsInCollection(Collection<Profile> profiles, String name) {
        return profiles.stream().map(Profile::getName).filter(profileName -> profileName.equals(name)).findAny().isPresent();
    }

    private void onTableModelEvent(TableModelEvent event) {
        //Too noisey, even for debug
        //LogWriter.logDebug("Import Table model event. Type: " + event.getType() + " Column: " + event.getColumn() + " First Row: " + event.getFirstRow() + " Last Row: " + event.getLastRow());
        //We only care about updates to the name column
        if (event.getType() == TableModelEvent.UPDATE && event.getColumn() == NAME_COLUMN_INDEX) {
            //get the new name of the profile
            String newName = (String) ((TableModel) event.getSource()).getValueAt(event.getFirstRow(), NAME_COLUMN_INDEX);
            //get the corresponding profile from our list. 
            Profile profile = profiles.get(event.getFirstRow());

            LogWriter.logDebug("Updating profile: " + profile + " new name: " + newName);
            //Set the new value
            profile.setName(newName);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ImportDialog dialog = new ImportDialog(new javax.swing.JFrame(), true, Collections.emptyList());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autoButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clipboardButton;
    private javax.swing.JButton envButton;
    private javax.swing.JButton fileButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton okButton;
    private javax.swing.JTable profileTable;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JButton selectNoneButton;
    // End of variables declaration//GEN-END:variables

}
